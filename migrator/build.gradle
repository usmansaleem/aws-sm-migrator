plugins {
    id 'application'
    id "com.diffplug.spotless" version "6.15.0"
    id 'com.avast.gradle.docker-compose' version "0.16.11"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.19.33')
    implementation 'software.amazon.awssdk:secretsmanager'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'info.picocli:picocli:4.7.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.1'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
    // Define the main class for the application.
    mainClass = 'aws.sm.migrator.AwsSMMigrator'
    startScripts {
     applicationName "aws-sm-migrator"
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
        licenseHeader '/* Licensed under Apache-2.0 $YEAR. */'
    }
}

dockerCompose {
    executable = "${project.projectDir}/docker-compose"
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("integrationTest", Test) {
    description = 'Runs integration tests.'
    group = "verification"

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
    environment 'AWS_REGION', 'us-east-2'
    environment 'AWS_ACCESS_KEY_ID', 'test'
    environment 'AWS_SECRET_ACCESS_KEY', 'test'
    environment 'AWS_SESSION_TOKEN', 'test'

    useJUnitPlatform()

    testLogging {
        events "passed"
    }

    doFirst {
        dockerCompose.exposeAsEnvironment(integrationTest)
    }
}

check.dependsOn integrationTest
dockerCompose.isRequiredBy integrationTest
